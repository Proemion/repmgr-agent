#!/usr/bin/env python
# -*- coding: utf-8 -*-
# kate: space-indent on; indent-width 4; replace-tabs on;
#
# Copyright Â© 2016 PROEMION GmbH
#
# Authors:
#   Michael Ziegler <michael.ziegler@proemion.com>

import sys
import spur
import psycopg2
import psycopg2.extras
import threading

from optparse import OptionParser

def go_nodaemon(func, *args, **kwargs):
    thr = threading.Thread(target=func, args=args, kwargs=kwargs)
    thr.daemon = False
    thr.start()
    return thr


def deploy_appserver_pgbouncer(cluster_name, remote_host, databases, master, timeout):
    cluster_config = "/etc/pgbouncer/databases/%s.ini" % cluster_name
    try:
        with spur.SshShell(hostname=remote_host["ip_addr"],
                        username=remote_host["username"],
                        missing_host_key=spur.ssh.MissingHostKey.accept,
                        connect_timeout=timeout) as shell:
            with shell.open(cluster_config, "wb") as pgbouncer:
                for database in databases:
                    if remote_host["application_name"] and "application_name" not in master["conninfo"]:
                        print >> pgbouncer, "%s = %s application_name=%s" % (database["datname"], master["conninfo"], remote_host["application_name"])
                    else:
                        print >> pgbouncer, "%s = %s" % (database["datname"], master["conninfo"])
            if remote_host["username"] == "root":
                shell.run(["service", "pgbouncer", "reload"])
            else:
                shell.run(["sudo", "service", "pgbouncer", "reload"])
    except spur.ssh.ConnectionError, err:
        if remote_host["application_name"]:
            print >> sys.stderr, "Could not update pgbouncer on %s [%s]: %s" % (remote_host["ip_addr"], remote_host["application_name"], err.original_error.message)
        else:
            print >> sys.stderr, "Could not update pgbouncer on %s: %s" % (remote_host["ip_addr"], err.original_error.message)


def main():
    parser = OptionParser("Usage: %prog [options]")
    parser.add_option("-c", "--cluster", help="name of the cluster")
    parser.add_option("-t", "--timeout", help="timeout for the SSH connection in seconds [1]", type=int, default=1)
    parser.add_option("-p", "--pgconnstring",
                      default="host=/var/run/postgresql",
                      help="postgres connection string [host=/var/run/postgresql].")
    options, posargs = parser.parse_args()

    if not options.cluster or posargs:
        print >> sys.stderr, "Need cluster option and must not have any positional args, see --help"
        return 1

    conn = psycopg2.connect(options.pgconnstring)
    crs = conn.cursor(cursor_factory = psycopg2.extras.DictCursor)

    # Query current master

    crs.execute(
        """SELECT id, name, type, conninfo """
        """FROM repmgr_%s.repl_nodes """
        """WHERE active """
        """AND type = 'master' """
        """ORDER BY id""" % options.cluster
    )

    master = crs.fetchone()

    # Query databases

    crs.execute(
        """SELECT datname """
        """FROM pg_database """
        """WHERE NOT datistemplate """
        """AND datname NOT IN ('postgres')"""
    )

    databases = crs.fetchall()

    if not databases:
        raise ValueError("no databases")

    # Query application servers

    crs.execute(
        """SELECT * """
        """FROM repmgr_%s.app_servers """
        """WHERE enabled """
        """ORDER BY id""" % options.cluster
    )

    remote_hosts = crs.fetchall()

    if not remote_hosts:
        raise ValueError("no remote hosts")

    # Run deployment in parallel threads, one per remote host. They are not
    # daemonized, so pgdeploy will not exit until all the threads are finished.
    for remote in remote_hosts:
        go_nodaemon(deploy_appserver_pgbouncer, options.cluster, remote, databases, master, options.timeout)

if __name__ == '__main__':
    sys.exit(main())
