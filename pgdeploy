#!/usr/bin/env python
# -*- coding: utf-8 -*-
# kate: space-indent on; indent-width 4; replace-tabs on;

import sys
import spur
import psycopg2
import psycopg2.extras
import threading

from optparse import OptionParser

def go_nodaemon(func, *args, **kwargs):
    thr = threading.Thread(target=func, args=args, kwargs=kwargs)
    thr.daemon = False
    thr.start()
    return thr


def deploy_appserver_pgbouncer(cluster_name, remote_host, databases, master):
    cluster_config = "/etc/pgbouncer/databases/%s.ini" % cluster_name
    with spur.SshShell(hostname=remote_host["ip_addr"], missing_host_key=spur.ssh.MissingHostKey.accept) as shell:
        with shell.open(cluster_config, "wb") as pgbouncer:
            for database in databases:
                print >> pgbouncer, "%s = %s" % (database, master)
        shell.run(["/usr/bin/service", "pgbouncer", "reload"])


def main():
    parser = OptionParser("Usage: %prog [options]")
    parser.add_option("-c", "--cluster", help="name of the cluster")
    options, posargs = parser.parse_args()

    if not options.cluster or posargs:
        print >> sys.stderr, "Need cluster option and must not have any positional args, see --help"
        return 1

    conn = psycopg2.connect(host="/var/run/postgresql")
    crs = conn.cursor(cursor_factory = psycopg2.extras.DictCursor)

    remote_hosts = ["10.10.2.227", "10.10.2.228"]
    # Query current master

    crs.execute(
        """SELECT id, name, type, conninfo """
        """FROM repmgr_%s.repl_nodes """
        """WHERE active """
        """AND type = 'master' """
        """ORDER BY id""" % options.cluster
    )

    master = crs.fetchone()

    # Query databases

    crs.execute(
        """SELECT datname """
        """FROM pg_database """
        """WHERE NOT datistemplate """
        """AND datname NOT IN ('postgres')"""
    )

    databases = [ row['datname'] for row in crs.fetchall() ]

    if not databases:
        raise ValueError("no databases")

    # Query application servers

    crs.execute(
        """SELECT id, name, ip_addr """
        """FROM repmgr_%s.app_servers """
        """WHERE enabled """
        """ORDER BY id""" % options.cluster
    )

    remote_hosts = crs.fetchall()

    if not remote_hosts:
        raise ValueError("no remote hosts")

    # Run deployment in parallel threads, one per remote host. They are not
    # daemonized, so pgdeploy will not exit until all the threads are finished.
    for remote in remote_hosts:
        go_nodaemon(deploy_appserver_pgbouncer, options.cluster, remote, databases, master)

if __name__ == '__main__':
    sys.exit(main())
